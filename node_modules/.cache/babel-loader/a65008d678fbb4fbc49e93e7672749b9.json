{"ast":null,"code":"var _jsxFileName = \"/Users/yusukenakano/Documents/unchain/dApp-starter-project/src/App.js\";\n// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\n\nimport { ethers } from \"ethers\";\n/* ABIファイルを含むWavePortal.jsonファイルをインポートする*/\n\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  /* ユーザーのパブリックウォレットを保存するために使用する状態変数を定義 */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /* ユーザーのメッセージを保存するために使用する状態変数を定義 */\n\n  const [messageValue, setMessageValue] = useState(\"\");\n  /* すべてのwavesを保存する状態変数を定義 */\n\n  const [allWaves, setAllWaves] = useState([]);\n  console.log(\"currentAccount: \", currentAccount);\n  /* デプロイされたコントラクトのアドレスを保持する変数を作成 */\n\n  const contractAddress = \"0xDd87850a65302336EfA01398E06c0AC51903Dc3A\";\n  /* コントラクトからすべてのwavesを取得するメソッドを作成 */\n\n  /* ABIの内容を参照する変数を作成 */\n\n  const contractABI = abi.abi;\n  /*\n  * window.ethereumにアクセスできることを確認します。\n  */\n\n  const getAllWaves = async () => {\n    const {\n      ethereum\n    } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /* コントラクトからgetAllWavesメソッドを呼び出す */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /* UIに必要なのは、アドレス、タイムスタンプ、メッセージだけなので、以下のように設定 */\n\n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          };\n        });\n        /* React Stateにデータを格納する */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * `emit`されたイベントに反応する\n   */\n\n\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n    /* NewWaveイベントがコントラクトから発信されたときに、情報をを受け取ります */\n\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n    /*メモリリークを防ぐために、NewWaveのイベントを解除します*/\n\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認します */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // connectWalletメソッドを実装\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // waveの回数をカウントする関数を実装\n\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        /*\n        * ABIを参照\n        */\n\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber()); //追加1\n\n        let contractBalance = await provider.getBalance(wavePortalContract.address);\n        console.log(\"Contract balance:\", ethers.utils.formatEther(contractBalance)); //追加２\n\n        let contractBalance_post = await provider.getBalance(wavePortalContract.address);\n        /* 契約の残高が減っていることを確認 */\n\n        if (contractBalance_post < contractBalance) {\n          /* 減っていたら下記を出力 */\n          console.log(\"User won ETH!\");\n        } else {\n          console.log(\"User didn't win ETH.\");\n        }\n\n        console.log(\"Contract balance after wave:\", ethers.utils.formatEther(contractBalance_post));\n        /*\n        * コントラクトに👋（wave）を書き込む。\n        */\n\n        const waveTxn = await wavePortalContract.wave(messageValue, {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* WEBページがロードされたときに下記の関数を実行します */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDC4B\"), \" WELCOME!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"\\u30A4\\u30FC\\u30B5\\u30EA\\u30A2\\u30E0\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u3092\\u63A5\\u7D9A\\u3057\\u3066\\u3001\\u300C\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  }, \"\\uD83D\\uDC4B\"), \"(wave)\\u300D\\u3092\\u9001\\u3063\\u3066\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"shine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 93\n    }\n  }, \"\\u2728\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, \"Connect Wallet\"), currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, \"Wallet Connected\"), currentAccount && /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"messageArea\",\n    placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3053\\u3061\\u3089\",\n    type: \"text\",\n    id: \"message\",\n    value: messageValue,\n    onChange: e => setMessageValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }\n  }), currentAccount && allWaves.slice(0).reverse().map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"#F8F8FF\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, \"Message: \", wave.message));\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/yusukenakano/Documents/unchain/dApp-starter-project/src/App.js"],"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","messageValue","setMessageValue","allWaves","setAllWaves","console","log","contractAddress","contractABI","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","error","onNewWave","from","prevState","on","off","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","count","getTotalWaves","toNumber","contractBalance","getBalance","utils","formatEther","contractBalance_post","waveTxn","gasLimit","hash","wait","e","target","value","slice","reverse","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\nimport { ethers } from \"ethers\";\n/* ABIファイルを含むWavePortal.jsonファイルをインポートする*/\nimport abi from \"./utils/WavePortal.json\";\nconst App = () => {\n /* ユーザーのパブリックウォレットを保存するために使用する状態変数を定義 */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /* ユーザーのメッセージを保存するために使用する状態変数を定義 */\n  const [messageValue, setMessageValue] = useState(\"\")\n  /* すべてのwavesを保存する状態変数を定義 */\n  const [allWaves, setAllWaves] = useState([]);\n  console.log(\"currentAccount: \", currentAccount);\n  /* デプロイされたコントラクトのアドレスを保持する変数を作成 */\n  const contractAddress = \"0xDd87850a65302336EfA01398E06c0AC51903Dc3A\";\n  /* コントラクトからすべてのwavesを取得するメソッドを作成 */\n  /* ABIの内容を参照する変数を作成 */\n  const contractABI = abi.abi;\n   /*\n  * window.ethereumにアクセスできることを確認します。\n  */\n   const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      /* コントラクトからgetAllWavesメソッドを呼び出す */\n      const waves = await wavePortalContract.getAllWaves();\n      /* UIに必要なのは、アドレス、タイムスタンプ、メッセージだけなので、以下のように設定 */\n      const wavesCleaned = waves.map(wave => {\n        return {\n          address: wave.waver,\n          timestamp: new Date(wave.timestamp * 1000),\n          message: wave.message,\n        };\n      });\n\n  /* React Stateにデータを格納する */\n      setAllWaves(wavesCleaned);\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n    /**\n     * `emit`されたイベントに反応する\n     */\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [\n      ...prevState,\n      {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message,\n      },\n    ]);\n  };\n\n    /* NewWaveイベントがコントラクトから発信されたときに、情報をを受け取ります */\n  if (window.ethereum) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n    wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n    /*メモリリークを防ぐために、NewWaveのイベントを解除します*/\n    return () => {\n      if (wavePortalContract) {\n      wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n    }, []);\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認します */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n// connectWalletメソッドを実装\nconst connectWallet = async () => {\n  try {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"Get MetaMask!\");\n      return;\n    }\n    const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n    console.log(\"Connected: \", accounts[0]);\n    setCurrentAccount(accounts[0]);\n  } catch (error) {\n    console.log(error)\n  }\n}\n// waveの回数をカウントする関数を実装\nconst wave = async () => {\n  try {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      /*\n      * ABIを参照\n      */\n      const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      let count = await wavePortalContract.getTotalWaves();\n      console.log(\"Retrieved total wave count...\", count.toNumber());\n      //追加1\n      let contractBalance = await provider.getBalance(\n        wavePortalContract.address\n      );\n      console.log(\n        \"Contract balance:\",\n        ethers.utils.formatEther(contractBalance)\n      );\n      //追加２\n      let contractBalance_post = await provider.getBalance(wavePortalContract.address);\n      /* 契約の残高が減っていることを確認 */\n      if (contractBalance_post < contractBalance){\n\t    /* 減っていたら下記を出力 */\n\t    console.log(\"User won ETH!\");\n      } else {\n\t    console.log(\"User didn't win ETH.\");\n      }\n      console.log(\n\t    \"Contract balance after wave:\",\n\t    ethers.utils.formatEther(contractBalance_post)\n      );\n      /*\n      * コントラクトに👋（wave）を書き込む。\n      */\n      const waveTxn = await wavePortalContract.wave(messageValue,{gasLimit:300000});\n      console.log(\"Mining...\", waveTxn.hash);\n      await waveTxn.wait();\n      console.log(\"Mined -- \", waveTxn.hash);\n      count = await wavePortalContract.getTotalWaves();\n      console.log(\"Retrieved total wave count...\", count.toNumber());\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\n  /* WEBページがロードされたときに下記の関数を実行します */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        <span role=\"img\" aria-label=\"hand-wave\">👋</span> WELCOME!\n        </div>\n        <div className=\"bio\">\n          イーサリアムウォレットを接続して、「<span role=\"img\" aria-label=\"hand-wave\">👋</span>(wave)」を送ってください<span role=\"img\" aria-label=\"shine\">✨</span>\n        </div>\n        {/* waveボタンにwave関数を連動させる。*/}\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/* ウォレットコネクトのボタンを実装 */}\n        {!currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n        </button>\n        )}\n        {currentAccount && (\n        <button className=\"waveButton\" onClick={connectWallet}>\n            Wallet Connected\n        </button>)\n        }\n        {/* メッセージボックスを実装*/}\n        {currentAccount && (<textarea name=\"messageArea\"\n            placeholder=\"メッセージはこちら\"\n            type=\"text\"\n            id=\"message\"\n            value={messageValue}\n            onChange={e => setMessageValue(e.target.value)} />)\n        }\n        {/* 履歴を表示する */}\n        {currentAccount && (\n        allWaves.slice(0).reverse().map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"#F8F8FF\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })\n        )}\n      </div>\n    </div>\n  );\n  }\nexport default App\n"]},"metadata":{},"sourceType":"module"}